				  Java 11
..............................................................................................

How session is planned? Road Map

1.New Programming / api features
2.New Arch features,infrastructure features,tools
..............................................................................................
				 Java

		Java is not only Programming language, but technology.

Java Technology offers tools,languages,compilers,runtimes(jvm).

Java apps are built using many programming lanugages which are jvm dialects , meaning that on jvm you can run apps which are created using many languages.

Languages are 
Java Programming lanugage
Groovy
Scala
Kotlin
............................................................................................
			  Functional Programming Principles and JVM
.............................................................................................

Functional Programming is one of the oldest programming stye, it is first style of programming, in 1950 this model was introduced,

FP is based on mathmetical abstraction "Lambda Calculs"

LISP is the first Programming language based on Lambda Calculs.

Function represents unit of computation.

Functional Programming offers

1.Declarative coding
2.Declarative Concurrency
3.State mutations and concurrency via pure functions and immutablity.
.......................&&&&&&&&&&&&&&&&&&&&&&&&&..............................................
				OO Principles

1.Abstraction
2.Encapsulation
3.Modularity
4.Typing
   -Polyphisim
5.Hierarchy
   -has-a
   -inheritance
6.concurrency
  
7.Persistency
   ......................................................................................
			     Funtional Programming principles


1.functions are first class citizen
   ->functions are values like strings,numbers,boolean,objects
since function is value can be assigned to a variable.

2.Higher order functions
   function which accepts other functions as parameters and can return other functions
  functions are building block for nonblocking and async arch.

3.pure functions
   function receives parameters which never modifity its input, returns as it is.
 if i change input parameter,function should not do any sides  

4.side effects and immutablity.
  if function does io, or any mutations are done as part of input parameters called side effects..
   Dont do side effects,

5.Referencial transperancy

6.Loops over recurrssion
.............................................................................................
				Async and Non blocking Apps
.............................................................................................

What is non blocking Apps?

Does java support non blocking arch?


Request Per thread Model

1000 request = 1000 threads

1ml req =  1 threads


Thread :
 Creation, Allocate some memory - up to 5Mb
 Thread Ctx switch -

C10K problem:

How to fix the multi threaded io model, having limited no of threads how to handle more concurreny.

Implementations

1.nginx
2.nodejs

......

Java and nonblocking arch.

Java introduced non blocking socket api via "Java 7 nio" lib

Java nio was not ready for thread management.

Thanks to red hat..

Red Hat introduced the first framework 

1.Netty Server /framework written on nio libs for building non blocking io apps

2.Vert.X - the second non blocking arch written on jvm

3.Quarkus
   Java 11 has feature called "Graal" Compiler integration

4.Spring 5 framework offers Non blocking arch via "Spring Web Flux"    

............................................................................................
				 Java 11
............................................................................................

Java Versioning System
Multiple JDK options  - Oracle JDK, Open JDK


After JDK -10 
 Oracle JDK
 Open JDK

.............................................................................................

Java 10 :
  Experimental Java Based JIT Compiler - grall
    =>Cloud Native apps / Container native apps 
.............................................................................................
			       Java 11
............................................................................................

Java Versioning System
Multiple JDK options  - Oracle JDK, Open JDK
.............................................................................................
				Java Release Cadence
............................................................................................

In traditional java (before java 11) , Oracle used to have model on which they produced a  major version and the goal was to have a major version approximately every two years and they would support it for a long time.

Java 9 - 2015-jan-----2017-jan -  two years

In case if they want to add new features/changes who want to add , means who could not change the orginal specification, rather who keeps minior version
 
  9.1,9.2,9.3........

Until new release come , oracle need to give support.
Minor updates were release every six months....

Oracle wanted to change this version model, decided to move paid model.
.............................................................................................
				 Oracle JDK development model

1.
Oracle JDK binary release under BCL lic  -free for dev and paid for  production

Oracle Open JDK binary release under GPL lic -  free for dev and production

2.JDK to be released for every 6 months with major release  jdk 11 , 12, 13...
  Every version we can introduce new features, bug fixing,deprecations......

 The changes are happing both oracle jdk and open jdk hand in hand.
 No changes in performance,apis, both oracle and open jdk

 But this feature not available before jdk11.

 Oracle jdk has live support incase if you end up any issues.
 Open jdk has also support but it takes time to fix isssues.

Why Oracle jdk is good for production?

 jdk versions are keep on going 11,12,13...

if your app is running on jdk 11, now we have 12,if you want to change oracle offers  support 
 "LTS" -  Long term Support

LTS support for any jdk there years
  11 -------17
 Only LTS support available for Oracle JDK only not for Open JDK

JDK Downloads who had two models

openjdk :https://openjdk.java.net/
oraclejdk:https://www.oracle.com/java/technologies/downloads/
.............................................................................................

.............................................................................................
			Features which were not available in OpenJDK 9,10
				 Now Available in OpenJDK 11

1.Application class data sharing
2.Project ZGC
3.Flight Recorder
4.Mission Controller
5.System Usage Loggers
				..............................................................................................
				   Java Modular System
..............................................................................................
 
Java Module system introduced in java 9, in 11 it has been standardized


What is Java Module?
  A Java Module is a packaging mechanism that enables you to package a java apps or apis as a separate java Modules.
 A Java Module is packaged as a modular JAR file.
 A Java Module can specify which of the java packages it contains that should be visible to other java modules which uses this module -  scope /visibility of the packages.
 A Java Module can have depedency which module it requires.


Code Reuse?
-Behaviour reuse
    class
-Abstraction reuse
   interfaces

How classes and interfaces are organized and reused?

Packages.

package is way to organize the classes and interfaces.


Encapsulation:
..............

How to allow or restrict about "code sharing" with in or outside boundarys.

code:
  variables,methods,class,interfaces

Application is collection of code, which are organized logical with boundary.

Module extends the power of encapuslation for packages

..............................................................................................
		       From Java 9 onwards JDK itself has been modularized
..............................................................................................
Now , rt.jar does not contain all java packages


The Module Platform Module System(JPMS) is introduced under JSR 326

JCP,JSR,JEP:

JCP - Java Community process
JSR - Java Specification Requests.The formal documents that describe proposed specifications and technologies for adding to the Java platform.
  ---It is community driven activites...

JEP - JDK Enhancement Proposal
   It is a process defined by Oracle Corporation for collecting propopals for enchancements to the JDK and Open JDK


Why java Modules?

Before Java 9,Java apps built using package model.

App contains = 100 classes and depedencies(200)

When you pack, you pack 100 classes + 200 dependencies and also you pack jdk libs apis which makes you bundle size larger.

Old java apps carries lot of unncessary code and depdencies which is problem for cloud and container worlds.

In old java applications, you cant avoid ClassNotFoundException, during runtime if you refere any class which is not part of the app.

Solution : Java Modules

JPMS Advantages:
...............
1.Smaller apps distributable via modular system, which makes real micro service development

2.Encapsulation of internal packages , the module need not expose any module if you dont want.

3.Startup dection of missing modules, Unlike classNotFoundException is discovered during runtime but modules missing are decected during loading itself.

How to create modular apps?































































































